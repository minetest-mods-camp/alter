A dialogue is a table with:
* speaker
  title of the dialogue
* text
  main text of the dialogue
* update_self(player, dialogue) (optional)
  function that updates the dialogue (runs before it is shown)
* successors (optional)
  branch points

Each successor has:
* option_text
  text shown on parent dialogue
* on_choose(player) (optional)
  a function that runs when this option is chosen
* dialogue (optional)
  another dialogue to show. This is just a shortcut for including it another send_dialogue in on_choose

A character registration has:
* sound
  sound to be played with this character


API
----
messagelib.register_character(name, registration)
* name is matched with speaker for each dialogue
* registration is a character registration

messagelib.send_dialogue(playername, dialogue)

messagelib.linear_layout(speaker, sequence)
* Creates a dialogue tree from a sequence of alternating text and option lines for a linear layout
  This is useful for tutorial dialogues and other longer dialogues
* speaker is the speaker associated with each dialogue text. To override this, see sequence
* sequence is a list of values alternating between dialogue and option texts.
  Alternatively, any item in the sequence can be a table, where it will override the defaults,
  allowing for custom update_self, on_choose, speaker, and other dialogue options.
* Example:
  messagelib.linear_layout(
  "Tutorial Master",
  {"To go forward, press the w key",      -- dialogue text
   "Everyone knows that",                 -- option_text
   {speaker = "Tired Tutorial Master",    -- dialogue text
   text = "To go back, press the s key"},
   "Ok",                                  -- option_text
  })
